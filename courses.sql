insert into public.courses (id, title, details, textcourse, hardlevel, users_id)
values  (1, 'TypeScript', 'В этом уроке мы узнаем, что такое TypeScript, а также разберем его особенности.', 'Что такое TypeScript
TypeScript — это JavaScript с дополнительным синтаксисом для указания типов данных. Он дает три основных преимущества:

Нахождение некоторых видов ошибок еще до запуска кода
Более простой рефакторинг кода
Полная поддержка возможностей редактора: автодополнения, навигации по коду и прочее
В программировании языки делятся на две большие группы: динамически типизированные и статически типизированные. Преимущества TypeScript появляются за счет того, что JavaScript относится к первой группе. У таких языков есть интерпретатор — программа, которая выполняет код построчно без предварительного анализа:

# node (Node.js) — интерпретатор JavaScript
# Код сразу запускается на исполнение
node index.js
Если в таком коде есть ошибки типов, например, в функцию вместо обычного числа пришло число типа BigInt, то об ошибке мы узнаем только во время запуска кода:

function sum(a, b) {
  return a + b;
}

sum(10n, 5); // упс
// 10n — число типа BigInt, при сложении с обычным числом возникнет ошибка в рантайме
// Uncaught TypeError: Cannot mix BigInt and other types, use explicit conversions
TypeScript относится к статически типизированным языкам, поэтому работает по-другому. Перед запуском кода этих языков на выполнение его нужно скомпилировать.

Во время компиляции проверяется, что программа типобезопасна — не содержит ошибок, подобных примеру выше. Если компилятор нашел несоответствие типов, то он останавливает компиляцию и выводит предупреждения о том, где типы не сходятся. Тот же пример на TypeScript:

function sum(a: number, b: number) {
  return a + b;
}

sum(10n, 5);
// Возникнет ошибка на этапе компиляции
// Argument of type ''bigint'' is not assignable to parameter of type ''number''.
Код выше не только не запустится на исполнение, но и не прошел компиляцию. Компилятор TypeScript остановит выполнение и укажет на ошибку несоответствия типов.', 1, '{9}'),
        (2, 'Типы данных', 'В этом уроке мы узнаем, какие типы существуют в TypeScript, что такое вывод типов и зачем это нужно в программировании.', 'TypeScript является строго типизированным языком, и каждая переменная и константа в нем имеет определенный тип. При этом в отличие от javascript мы не можем динамически изменить ранее указанный тип переменной.

Переменные и константы в TypeScript определяются так же, как и в JavaScript:

let age = 10;

let company = ''Hexlet'';
let user = {
  firstName: ''Miro'',
};
let fruits = [''apple'', ''banana''];
При этом TypeScript выполняет дополнительную работу на фоне. Он автоматически связывает переменную или константу с типом данных начального значения. В программировании такой процесс называется выводом типов.

Тип переменной поменяться не может:

let age = 10;
// Все нормально, тип тот же (Number)
age = 11.1;

// Type ''string'' is not assignable to type ''number''.
age = ''some string''; // Error!

В TypeScript имеются следующие базовые типы:

boolean: логическое значение true или false

number: числовое значение

string: строки

Array: массивы

кортежи

Enum: перечисления

Any: произвольный тип

Symbol

null и undefined: соответствуют значениям null и undefined в javascript

Never: также представляет отсутствие значения и используется в качестве возвращаемого типа функций, которые генерируют или возвращают ошибку

Явное указание типа
TypeScript позволяет явно указывать тип переменных. Но на практике это редко нужно делать вручную, так как вывод типов работает автоматически:

let name: string = ''Alice'';
const count: number = 100;
let canPlay: boolean = true;

По умолчанию в TypeScript переменные могут содержать только указанный тип без исключений, например, мы не можем присвоить null:

let age = 30;
age = null; // Error!
Такое поведение защищает нас от большого числа ошибок, которые связаны с тем, что нет проверок на null. При этом null иногда является допустимым значением. В этом случае используется специальный Union Type:

let age: number | null = 30;
age = null;
Здесь мы указали, что тип у переменной age — это number | null. Читается это так: «число или null». Union Type интересная и удобная концепция, которую мы рассмотрим подробнее позже.', 2, '{9}');